<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on </title>
    <link>/tags/javascript/</link>
    <description>Recent content in Javascript on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>nomikosi@thefuriousprogrammer.com (Iakovos Nomikos)</managingEditor>
    <webMaster>nomikosi@thefuriousprogrammer.com (Iakovos Nomikos)</webMaster>
    <lastBuildDate>Thu, 28 Mar 2019 12:24:14 +0300</lastBuildDate>
    
	<atom:link href="/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JS Closures</title>
      <link>/post/javascript/closures_in_js/</link>
      <pubDate>Thu, 28 Mar 2019 12:24:14 +0300</pubDate>
      <author>nomikosi@thefuriousprogrammer.com (Iakovos Nomikos)</author>
      <guid>/post/javascript/closures_in_js/</guid>
      <description>A few years back during a work seminar, I had the opportunity to dive into JS waters and see a bit of its beauty. Up to that point my background was C, C++, Java a bit NodeJS, but I never had the luck to see how functional programming really looks like. For those two months I was mind blown (in a good and bad way see JS &amp;lsquo;==&amp;rsquo; ) since I had discovered a completely new way of programming.</description>
    </item>
    
    <item>
      <title>Creating Java annotations</title>
      <link>/post/java/enterprise/java_create_annotations/</link>
      <pubDate>Wed, 30 Jan 2019 12:24:14 +0300</pubDate>
      <author>nomikosi@thefuriousprogrammer.com (Iakovos Nomikos)</author>
      <guid>/post/java/enterprise/java_create_annotations/</guid>
      <description>I am pretty sure most of us have used custom annotation in our projects at some point. Today we will go step by step and see how to create our own! Annotations in Java are everywhere, from @test, @BeforeClass, @AfterClass in Junit, @Override,@Deprecated in Java SE or @Inject, @Decorator in Java EE or @Entity in JPA.
The first step is to declare an interface with @ .The use of @ denotes that our interface will be of annotation type.</description>
    </item>
    
  </channel>
</rss>