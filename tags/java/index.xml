<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on </title>
    <link>/tags/java/</link>
    <description>Recent content in Java on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>nomikosi@thefuriousprogrammer.com (Iakovos Nomikos)</managingEditor>
    <webMaster>nomikosi@thefuriousprogrammer.com (Iakovos Nomikos)</webMaster>
    <lastBuildDate>Sat, 16 Mar 2019 12:24:14 +0300</lastBuildDate>
    
	<atom:link href="/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Apache camel</title>
      <link>/post/other/camel_spring_boot/</link>
      <pubDate>Sat, 16 Mar 2019 12:24:14 +0300</pubDate>
      <author>nomikosi@thefuriousprogrammer.com (Iakovos Nomikos)</author>
      <guid>/post/other/camel_spring_boot/</guid>
      <description>Recently I had the opportunity to play with Apache Camel and Spring Boot. I found the result quite entertaining! If you haven&amp;rsquo;t heard the name before, it is an open source routing tool which can receive messages, process them and send them to other destinations. In my case, I was reading payment messages from one topic, storing them in a db and then scheduled request with a POST call to another server.</description>
    </item>
    
    <item>
      <title>Creating Java annotations</title>
      <link>/post/java/enterprise/java_create_annotations/</link>
      <pubDate>Wed, 30 Jan 2019 12:24:14 +0300</pubDate>
      <author>nomikosi@thefuriousprogrammer.com (Iakovos Nomikos)</author>
      <guid>/post/java/enterprise/java_create_annotations/</guid>
      <description>I am pretty sure most of us have used custom annotation in our projects at some point. Today we will go step by step and see how to create our own! Annotations in Java are everywhere, from @test, @BeforeClass, @AfterClass in Junit, @Override,@Deprecated in Java SE or @Inject, @Decorator in Java EE or @Entity in JPA.
The first step is to declare an interface with @ .The use of @ denotes that our interface will be of annotation type.</description>
    </item>
    
    <item>
      <title>JShell</title>
      <link>/post/java/java_9/jshell/</link>
      <pubDate>Tue, 13 Nov 2018 20:24:14 +0300</pubDate>
      <author>nomikosi@thefuriousprogrammer.com (Iakovos Nomikos)</author>
      <guid>/post/java/java_9/jshell/</guid>
      <description>For those who haven&amp;rsquo;t heard the news, Java has officially its own shell, named (obviously) JShell since Java 9. It is a REPL type of environment where you type your code in the command line interface and see the results immediately on your screen. This is a good way to test simple programming concepts and ideas without the inherited boilerplate verbosity, which JUnit or main function has. Also semicolons in the end are optional!</description>
    </item>
    
    <item>
      <title>Java 10 &#43; var = L.F.E. </title>
      <link>/post/java/java_10/var/</link>
      <pubDate>Sun, 07 Oct 2018 20:24:14 +0300</pubDate>
      <author>nomikosi@thefuriousprogrammer.com (Iakovos Nomikos)</author>
      <guid>/post/java/java_10/var/</guid>
      <description>New variable type named &amp;lsquo;var&amp;rsquo; in Java 10? Have we started turning into JavaScript anarchists? Has its very substance been polluted by Kotlin enthusiasts? Should we all worry by this new &amp;ldquo;feature&amp;rdquo; (are we sure its not a bug?) or could there be any benefits from using &amp;lsquo;var&amp;rsquo; in our code?
Var is used for type inference in Java and helps reduce the verbosity of the language. This means you are able to omit variables&amp;rsquo; type, as it will be inferred by the compiler by looking at the right hand part of the assignment.</description>
    </item>
    
    <item>
      <title>JCrete 2018</title>
      <link>/post/jcrete/jcrete_2018/</link>
      <pubDate>Wed, 12 Sep 2018 20:24:14 +0300</pubDate>
      <author>nomikosi@thefuriousprogrammer.com (Iakovos Nomikos)</author>
      <guid>/post/jcrete/jcrete_2018/</guid>
      <description>Last July I had the opportunity to make three of my life dreams come true. First was taking a hike to Verliga dragonlake in Pindos, Greece. The second was watching Justice live which happened during We Are Electric festival in Holland. The third and most relative to this blog was attending JCrete unconference.
During my 4 year professional experience as a java developer, I have been to many conferences and meetings across Greece.</description>
    </item>
    
  </channel>
</rss>